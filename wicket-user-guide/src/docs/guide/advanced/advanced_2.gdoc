

With Wicket it's quite easy to build a callback URL that is handled on server side by a component or a behavior. What we have to do is to implement interface @org.apache.wicket.IRequestListener@:

{code}
public interface IRequestListener extends IClusterable
{

	/**
	 * Does invocation of this listener render the page. 
	 * 
	 * @return default {@code true}, i.e. a {@link RenderPageRequestHandler} is schedules after invocation 
	 */
	default boolean rendersPage()
	{
		return true;
	}
	
	/**
	 * Called when a request is received.
	 */
	void onRequest();
}
{code}

Method @onRequest@ is the handler that is executed to process the callback URL while @rendersPage@ tells if the whole page should be re-rendered after @onRequest@ has been executed (if we have a non-AJAX request).

An example of a component that implements @IRequestListener@ can be seen in the Wicket standard link component. Here is an excerpt from its code:

{code}
public abstract class Link<T> extends AbstractLink implements IRequestListener ... 
{
	/**
	 * Called when a link is clicked.
	 */
	public abstract void onClick();

	/**
	 * THIS METHOD IS NOT PART OF THE WICKET API. DO NOT ATTEMPT TO OVERRIDE OR CALL IT.
	 * 
	 * Called when a link is clicked. The implementation of this method is currently to simply call
	 * onClick(), but this may be augmented in the future.
	 */
	@Override
	public void onRequest()
	{
		// Invoke subclass handler
		onClick();
	}
}
{code}

Callback URLs can be generated with @Component@'s method @urlFor(PageParameters)@ or with method @urlFor (Behavior, RequestListenerInterface, PageParameters)@ if we are using a callback interface with a behavior (see the following example).

Project @CallbackURLExample@ contains a behavior (class @OnChangeSingleChoiceBehavior@) that implements @org.apache.wicket.IRequestListener@ to update the model of an @AbstractSingleSelectChoice@ component when user changes the selected option (it provides the same functionality of method @wantOnSelectionChangedNotifications@). 
The following is the implementation of @onRequest()@ provided by @OnSelectionChangedNotifications@:

{code}
@Override
public void onRequest() {	
	Request request = RequestCycle.get().getRequest();
	IRequestParameters requestParameters = request.getRequestParameters();
	StringValue choiceId = requestParameters.getParameterValue("choiceId");
	//boundComponent is the component that the behavior it is bound to.
	boundComponent.setDefaultModelObject( convertChoiceIdToChoice(choiceId.toString()));
}
{code}

When invoked via URL, the behavior expects to find a request parameter (choiceId) containing the id of the selected choice. This value is used to obtain the corresponding choice object that must be used to set the model of the component that the behavior is bound to (boundComponent). Method @convertChoiceIdToChoice@ is in charge of retrieving the choice object given its id and it has been copied from class @AbstractSingleSelectChoice@.

Another interesting part of @OnChangeSingleChoiceBehavior@ is its method @onComponentTag@ where some JavaScript “magic” is used to move user's browser to the callback URL when event “change” occurs on bound component:

{code}
@Override
public void onComponentTag(Component component, ComponentTag tag) {
	super.onComponentTag(component, tag);
		
	CharSequence callBackURL = getCallbackUrl();
	String separatorChar = (callBackURL.toString().indexOf('?') > -1 ? "&" : "?");
		
	String finalScript = "var isSelect = $(this).is('select');\n" +
				 "var component;\n" +	
				 "if(isSelect)\n" +
				 "	component = $(this);\n" +
				 "else \n" +
				 "	component = $(this).find('input:radio:checked');\n" +
				 "window.location.href='" + callBackURL +  separatorChar + 
				 "choiceId=' + " + "component.val()";
		
	tag.put("onchange", finalScript);
}
{code}

The goal of @onComponentTag@ is to build an onchange handler that forces user's browser to move to the callback URL (modifing standard property window.location.href). Please note that we have appended the expected parameter (choiceId) to the URL retrieving its value with a JQuery selector suited for the current type of component (a drop-down menu or a radio group). Since we are using JQuery in our JavaScript code, the behavior comes also with method @renderHead@ that adds the bundled JQuery library to the current page.

Method @getCallbackUrl()@ is used to generate the callback URL for our custom behavior: 

{code}
public CharSequence getCallbackUrl() {
	if (boundComponent == null) {
		throw new IllegalArgumentException(
			"Behavior must be bound to a component to create the URL");
	}

	return boundComponent.urlForListener(this, new PageParameters());
}
{code}


The home page of project @CallbackURLExample@ contains a @DropDownChoice@ and a @RadioChoice@ which use our custom behavior. There are also two labels to display the content of the models of the two components:

!CallbackURLExample-screenshot.png!

{note}
Implementing interface @IRequestListener@ makes a behavior stateful because its callback URL is specific for a given instance of component.
{note}

h3. Wicket events infrastructure

Starting from version 1.5 Wicket offers an event-based infrastructure for inter-component communication. The infrastructure is based on two simple interfaces (both in package @org.apache.wicket.event@) : @IEventSource@ and @IEventSink@. 

The first interface must be implemented by those entities that want to broadcast en event while the second interface must be implemented by those entities that want to receive a broadcast event.

The following entities already implement both these two interfaces (i.e. they can be either sender or receiver): @Component@, @Session@, @RequestCycle@ and @Application@.
@IEventSource@ exposes a single method named send which takes in input three parameters:

* *sink*: an implementation of @IEventSink@ that will be the receiver of the event. 
* *broadcast*: a @Broadcast@ enum which defines the broadcast method used to dispatch the event to the sink and to other entities such as sink children, sink containers, session object, application object and the current request cycle. It has four possible values:
{table}
*Value* | *Description*
BREADTH | The event is sent first to the specified sink and then to all its children components following a breadth-first order.
DEPTH | The event is sent to the specified sink only after it has been dispatched to all its children components following a depth-first order.
BUBBLE | The event is sent first to the specified sink and then to its parent containers.
EXACT | The event is sent only to the specified sink.
{table}
* *payload*: a generic object representing the data sent with the event.

Each broadcast mode has its own traversal order for @Session@, @RequestCycle@ and @Application@. See JavaDoc of class @Broadcast@ for further details about this order.

Interface @IEventSink@ exposes callback method @onEvent(IEvent<?> event)@ which is triggered when a sink receives an event. The interface @IEvent@ represents the received event and provides getter methods to retrieve the event broadcast type, the source of the event and its payload. Typically the received event is used checking the type of its payload object:

{code}
@Override
public void onEvent(IEvent event) {
  //if the type of payload is MyPayloadClass perform some actions 
  if(event.getPayload() instanceof MyPayloadClass) {
     //execute some business code.
  }else{
     //other business code
  }   		
}
{code}

Project @InterComponetsEventsExample@ provides a concrete example of sending an event to a component (named 'container in the middle') using all the available broadcast methods:

!InterComponentsEventsExample-screenshot.png!
